#! /usr/bin/env python
#*
#*  Copyright (c) 2010, Jack O'Quin
#*  Copyright (c) 2012, Markus Achtelik
#*  All rights reserved.
#*
#*  Redistribution and use in source and binary forms, with or without
#*  modification, are permitted provided that the following conditions
#*  are met:
#*
#*   * Redistributions of source code must retain the above copyright
#*     notice, this list of conditions and the following disclaimer.
#*   * Redistributions in binary form must reproduce the above
#*     copyright notice, this list of conditions and the following
#*     disclaimer in the documentation and/or other materials provided
#*     with the distribution.
#*   * Neither the name of the author nor the names of other
#*     contributors may be used to endorse or promote products derived
#*     from this software without specific prior written permission.
#*
#*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#*  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#*  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
#*  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
#*  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
#*  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#*  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#*  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
#*  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
#*  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#*  POSSIBILITY OF SUCH DAMAGE.
#***********************************************************

# mv_camera dynamic configuration

PACKAGE='mv_camera'
import roslib; roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator import *
from driver_base.msg import SensorLevels


gen = ParameterGenerator()

#       Name, Type, Reconfiguration level, Description, Default, Min, Max

gen.add("guid", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Serial number of camera, suffix CAMERA_MODEL_ + serial number (use first camera if null). e.g. BLUECOUGAR_GX002408",
        "")

#gen.add("reset_on_open", bool_t, SensorLevels.RECONFIGURE_CLOSE,
#        "Reset camera when opening the device.", False)


gen.add("frame_id", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "ROS tf frame of reference, resolved with tf_prefix unless absolute.",
        "camera")

pixel_clocks = gen.enum([
                  gen.const("pixel_clock_6M", double_t, 6.0, ""),
                  gen.const("pixel_clock_8M", double_t, 8.0, ""),
                  gen.const("pixel_clock_10M", double_t, 10.0, ""),
                  gen.const("pixel_clock_13M5", double_t, 13.5, ""),
                  gen.const("pixel_clock_20M", double_t, 20.0, ""),
                  gen.const("pixel_clock_24M", double_t, 24.0, ""),
                  gen.const("pixel_clock_27M", double_t, 27.0, ""),
                  gen.const("pixel_clock_32M", double_t, 32.0, ""),
                  gen.const("pixel_clock_37M6", double_t, 37.6, ""),
                  gen.const("pixel_clock_40M", double_t, 40.0, ""),
                  gen.const("pixel_clock_66M", double_t, 66.0, ""),
                  gen.const("pixel_clock_50M", double_t, 50.0, ""),
                  gen.const("pixel_clock_57M6", double_t, 57.6, ""),
                  ],
                 "Pixel clocks.")

gen.add("pixel_clock", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Pixel clock of image sensor [MHz].", 40., 6., 57.6, edit_method=pixel_clocks)
        
        
gen.add("frame_rate", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Camera speed (frames per second).", 15.0, 1.0, 240.0)

gen.add("camera_info_url", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Camera calibration URL for this video_mode (uncalibrated if null).",
        "")

gen.add("binning_x", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Number of pixels combined for horizontal binning, use device hints if zero.",
        0, 0, 4)

gen.add("binning_y", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Number of pixels combined for vertical binning, use device hints if zero.",
        0, 0, 4)

gen.add("roi_width", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Width of Region of Interest in unbinned pixels, full width if zero.",
        5000, 0, 5000)

gen.add("roi_height", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Height of Region of Interest in unbinned pixels, full height if zero.",
        5000, 0, 5000)

gen.add("x_offset", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Horizontal offset for left side of ROI in unbinned pixels.",
        0, 0, 5000)

gen.add("y_offset", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Vertical offset for top of ROI in unbinned pixels.",
        0, 0, 5000)

codings = gen.enum([gen.const("mono8", str_t, "mono8", ""),
                    gen.const("mono16", str_t, "mono16", ""),
                    gen.const("raw8", str_t, "raw8", ""),
                    gen.const("bgr8", str_t, "bgr8", ""),
                    gen.const("bgra8", str_t, "bgra8", ""),
                    gen.const("bgr16", str_t, "bgr16", ""),
                    gen.const("auto", str_t, "auto", "")
                    ],
                    "color coding methods")

gen.add("color_coding", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Color coding", "auto",
        edit_method = codings)

methods = gen.enum([gen.const("image_proc", str_t, "",
                              "Decode via ROS image_proc"),
                    gen.const("DownSample", str_t, "DownSample", ""),
                    gen.const("Simple", str_t, "Simple", ""),
                    gen.const("Bilinear", str_t, "Bilinear", ""),
                    gen.const("HQ", str_t, "HQ", ""),
                    gen.const("VNG", str_t, "VNG", ""),
                    gen.const("AHD", str_t, "AHD", "")],
                   "Bayer method")

gen.add("bayer_method", str_t, SensorLevels.RECONFIGURE_CLOSE,
        "Bayer decoding method (default: ROS image_proc).",
        "", edit_method = methods)

# Generic IIDC feature control states, not all apply.
controls = gen.enum([gen.const("Off", int_t, 0, "Use fixed value"),
                     gen.const("Query", int_t, 1, "Query current values"),
                     gen.const("Auto", int_t, 2, "Camera sets continuously"),
                     gen.const("Manual", int_t, 3, "Use explicit value"),
                     gen.const("OnePush", int_t, 4, "Camera sets once"),
                     gen.const("None", int_t, 5, "Feature not available")],
                    "Feature control states")
                    
control_speed = gen.enum([gen.const("acs_slow", str_t, "Slow", ""),
                     gen.const("acs_medium", str_t, "Medium", ""),
                     gen.const("acs_fast", str_t, "Fast", "")],
                    "Control speed for automatic features")                    

#gen.add("auto_brightness", int_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Brightness control state.", 1, 0, 4, edit_method = controls)

#gen.add("brightness", double_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Black level offset.", 0., 0., 4095.)

gen.add("exposure", int_t, SensorLevels.RECONFIGURE_RUNNING,
        "Auto exposure value .", 100, 0, 255)
         
gen.add("shutter_auto", bool_t, SensorLevels.RECONFIGURE_RUNNING,
        "Shutter control state.", True)

gen.add("shutter_auto_min", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Min shutter time [s] in auto mode.", 0.0, 0., 0.1)
        
gen.add("shutter_auto_max", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Max shutter time [s] in auto mode", 0.1, 0., 0.1)
        
gen.add("shutter", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Shutter time [s].", 0.005, 0., 0.1)

gen.add("gain_auto", bool_t, SensorLevels.RECONFIGURE_RUNNING,
        "Gain control state.", True)

gen.add("gain_auto_min", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Min relative circuit gain [dB] in auto mode.", 0., 0., 12.)
        
gen.add("gain_auto_max", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Max relative circuit gain [dB] in auto mode.", 12., 0., 12.)
        
gen.add("gain", double_t, SensorLevels.RECONFIGURE_RUNNING,
        "Relative circuit gain [dB] ", 0., 0., 12.)
        
gen.add("auto_control_speed", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "Control speed for automatic features", "Medium", edit_method=control_speed)   
        
gen.add("auto_query_values", bool_t, SensorLevels.RECONFIGURE_RUNNING,
        "Queries settings that are auto controlled.", False)     
        
        
hdr_modes = gen.enum([
                     gen.const("hdr_off", str_t, "off", ""),
                     gen.const("hdr_fixed0", str_t, "Fixed0", ""),
                     gen.const("hdr_fixed1", str_t, "Fixed1", ""),
                     gen.const("hdr_fixed2", str_t, "Fixed2", ""),
                     gen.const("hdr_fixed3", str_t, "Fixed3", ""),
                     gen.const("hdr_fixed4", str_t, "Fixed4", ""),
                     gen.const("hdr_fixed5", str_t, "Fixed5", ""),
                     gen.const("hdr_fixed6", str_t, "Fixed6", ""),
                     gen.const("hdr_user", str_t, "User", "")
                     ],
                    "Enable HDR / set HDR mode") 
                    
gen.add("hdr_mode", str_t, SensorLevels.RECONFIGURE_RUNNING,
        "HDR mode", "off", edit_method=hdr_modes) 

#gen.add("auto_gamma", int_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Gamma control state.", 1, 0, 4, edit_method = controls)

#gen.add("gamma", double_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Gamma expansion exponent.", 2.2, 0., 10.)

#gen.add("auto_hue", int_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Hue control state.", 1, 0, 4, edit_method = controls)

#gen.add("hue", double_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Color phase.", 0., 0., 4095.)

#gen.add("auto_saturation", int_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Saturation control state.", 1, 0, 4, edit_method = controls)


#gen.add("sharpness", double_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Image sharpness.", 1., 0., 4095.)

#gen.add("auto_white_balance", int_t, SensorLevels.RECONFIGURE_RUNNING,
#        "White balance control state.", 1, 0, 4, edit_method = controls)

#gen.add("white_balance_BU", double_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Blue or U component of white balance.",
#        0., 0., 4095.)

#gen.add("white_balance_RV", double_t, SensorLevels.RECONFIGURE_RUNNING,
#        "Red or V component of white balance.",
#        0., 0., 4095.)

gen.add("use_ros_time", bool_t, SensorLevels.RECONFIGURE_CLOSE,
        "Timestamp Image and CameraInfo using ros::Time::now()", True)

gen.add("embed_image_info", bool_t, SensorLevels.RECONFIGURE_CLOSE,
        "Embed extra info into the image data", True)


exit(gen.generate(PACKAGE, "MVCamera", "MVCamera"))
