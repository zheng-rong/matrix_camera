/* Auto-generated by genmsg_cpp for file /home/zheng/ros_code/matrix_camera/mv_camera/srv/PropertyMap.srv */
#ifndef MV_CAMERA_SERVICE_PROPERTYMAP_H
#define MV_CAMERA_SERVICE_PROPERTYMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace mv_camera
{
template <class ContainerAllocator>
struct PropertyMapRequest_ {
  typedef PropertyMapRequest_<ContainerAllocator> Type;

  PropertyMapRequest_()
  : command(0)
  , identifier()
  , value()
  {
  }

  PropertyMapRequest_(const ContainerAllocator& _alloc)
  : command(0)
  , identifier(_alloc)
  , value(_alloc)
  {
  }

  typedef int8_t _command_type;
  int8_t command;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _identifier_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  identifier;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _value_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  value;

  enum { GET_PROPERTY_LIST = 0 };
  enum { SET_PROPERTY = 1 };
  enum { GET_PROPERTY_INFO = 2 };
  enum { SEARCH_PROPERTY_MAP = 3 };
  enum { SAVE_SETTINGS = 4 };
  enum { LOAD_SETTINGS = 5 };
  enum { START_CAPTURE_PROCESS = 6 };
  enum { STOP_CAPTURE_PROCESS = 7 };
  enum { CAPTURE_SINGLE_FRAME = 8 };
  enum { RESTART_DEVICE = 9 };
  enum { CLOSE_DEVICE = 10 };
  enum { OPEN_DEVICE = 11 };
  enum { LOAD_PROPERTIES = 12 };
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SHOW_FLAGS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  SHOW_VALUES;
  static const double testd;

  typedef boost::shared_ptr< ::mv_camera::PropertyMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mv_camera::PropertyMapRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct PropertyMapRequest
typedef  ::mv_camera::PropertyMapRequest_<std::allocator<void> > PropertyMapRequest;

typedef boost::shared_ptr< ::mv_camera::PropertyMapRequest> PropertyMapRequestPtr;
typedef boost::shared_ptr< ::mv_camera::PropertyMapRequest const> PropertyMapRequestConstPtr;

template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PropertyMapRequest_<ContainerAllocator>::SHOW_FLAGS = "flagsOn";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  PropertyMapRequest_<ContainerAllocator>::SHOW_VALUES = "valuesOn";
template<typename ContainerAllocator> const double PropertyMapRequest_<ContainerAllocator>::testd = 1.23456;


template <class ContainerAllocator>
struct PropertyMapResponse_ {
  typedef PropertyMapResponse_<ContainerAllocator> Type;

  PropertyMapResponse_()
  : result()
  , status(0)
  {
  }

  PropertyMapResponse_(const ContainerAllocator& _alloc)
  : result(_alloc)
  , status(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  result;

  typedef int8_t _status_type;
  int8_t status;


  typedef boost::shared_ptr< ::mv_camera::PropertyMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mv_camera::PropertyMapResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct PropertyMapResponse
typedef  ::mv_camera::PropertyMapResponse_<std::allocator<void> > PropertyMapResponse;

typedef boost::shared_ptr< ::mv_camera::PropertyMapResponse> PropertyMapResponsePtr;
typedef boost::shared_ptr< ::mv_camera::PropertyMapResponse const> PropertyMapResponseConstPtr;


struct PropertyMap
{

typedef PropertyMapRequest Request;
typedef PropertyMapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PropertyMap
} // namespace mv_camera

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mv_camera::PropertyMapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mv_camera::PropertyMapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mv_camera::PropertyMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b0ad6e60308bc563e681de044965d49d";
  }

  static const char* value(const  ::mv_camera::PropertyMapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb0ad6e60308bc563ULL;
  static const uint64_t static_value2 = 0xe681de044965d49dULL;
};

template<class ContainerAllocator>
struct DataType< ::mv_camera::PropertyMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mv_camera/PropertyMapRequest";
  }

  static const char* value(const  ::mv_camera::PropertyMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mv_camera::PropertyMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int8 GET_PROPERTY_LIST=0\n\
int8 SET_PROPERTY=1\n\
int8 GET_PROPERTY_INFO=2\n\
int8 SEARCH_PROPERTY_MAP=3\n\
int8 SAVE_SETTINGS=4\n\
int8 LOAD_SETTINGS=5\n\
\n\
int8 START_CAPTURE_PROCESS=6\n\
int8 STOP_CAPTURE_PROCESS=7\n\
int8 CAPTURE_SINGLE_FRAME=8\n\
int8 RESTART_DEVICE=9\n\
int8 CLOSE_DEVICE=10\n\
int8 OPEN_DEVICE=11\n\
int8 LOAD_PROPERTIES=12\n\
\n\
string SHOW_FLAGS=flagsOn\n\
string SHOW_VALUES=valuesOn\n\
\n\
int8 command\n\
string identifier\n\
string value\n\
float64 testd=1.23456\n\
\n\
";
  }

  static const char* value(const  ::mv_camera::PropertyMapRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::mv_camera::PropertyMapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::mv_camera::PropertyMapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::mv_camera::PropertyMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27b333159efc3e544e859f255534a46f";
  }

  static const char* value(const  ::mv_camera::PropertyMapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x27b333159efc3e54ULL;
  static const uint64_t static_value2 = 0x4e859f255534a46fULL;
};

template<class ContainerAllocator>
struct DataType< ::mv_camera::PropertyMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mv_camera/PropertyMapResponse";
  }

  static const char* value(const  ::mv_camera::PropertyMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::mv_camera::PropertyMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string result\n\
int8 status\n\
\n\
\n\
";
  }

  static const char* value(const  ::mv_camera::PropertyMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mv_camera::PropertyMapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.command);
    stream.next(m.identifier);
    stream.next(m.value);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PropertyMapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::mv_camera::PropertyMapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
    stream.next(m.status);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PropertyMapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<mv_camera::PropertyMap> {
  static const char* value() 
  {
    return "e57467d958b91c16e19833e5c8c4fa20";
  }

  static const char* value(const mv_camera::PropertyMap&) { return value(); } 
};

template<>
struct DataType<mv_camera::PropertyMap> {
  static const char* value() 
  {
    return "mv_camera/PropertyMap";
  }

  static const char* value(const mv_camera::PropertyMap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mv_camera::PropertyMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e57467d958b91c16e19833e5c8c4fa20";
  }

  static const char* value(const mv_camera::PropertyMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mv_camera::PropertyMapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mv_camera/PropertyMap";
  }

  static const char* value(const mv_camera::PropertyMapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<mv_camera::PropertyMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e57467d958b91c16e19833e5c8c4fa20";
  }

  static const char* value(const mv_camera::PropertyMapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<mv_camera::PropertyMapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "mv_camera/PropertyMap";
  }

  static const char* value(const mv_camera::PropertyMapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // MV_CAMERA_SERVICE_PROPERTYMAP_H

