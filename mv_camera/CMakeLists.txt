cmake_minimum_required(VERSION 2.4.6)
include($ENV{ROS_ROOT}/core/rosbuild/rosbuild.cmake)
find_package(OpenCV REQUIRED)

# Set the build type.  Options are:
#  Coverage       : w/ debug symbols, w/o optimization, w/ code-coverage
#  Debug          : w/ debug symbols, w/o optimization
#  Release        : w/o debug symbols, w/ optimization
#  RelWithDebInfo : w/ debug symbols, w/ optimization
#  MinSizeRel     : w/o debug symbols, w/ optimization, stripped binaries
#set(ROS_BUILD_TYPE RelWithDebInfo)

rosbuild_init()

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

rosbuild_gensrv() #temporarily don't build service until const string bug is fixed
rosbuild_genmsg()

# auto-generated dynamic reconfiguration GUI
rosbuild_find_ros_package(dynamic_reconfigure)
include(${dynamic_reconfigure_PACKAGE_PATH}/cmake/cfgbuild.cmake)
gencfg()

add_definitions(-DGENICAM_CACHE_V2_3='"${PROJECT_SOURCE_DIR}/genicam_cache"')


# common source files for both node and nodelet driver interfaces
set(DRIVER_SOURCES
  src/driver_mv_camera.cpp
  src/dev_mv_camera.cpp
  src/features.cpp
  src/formats.cpp
  )


rosbuild_add_executable(mv_camera_interface src/driver_interface_node.cpp)

rosbuild_add_library(mv_camera_driver ${DRIVER_SOURCES})

rosbuild_add_executable(mv_camera_node src/mv_camera_node.cpp )
target_link_libraries(mv_camera_node  mv_camera_driver)

rosbuild_add_executable(modify_camera_settings src/modify_camera_settings.cpp )
target_link_libraries(mv_camera_node  mv_camera_driver)

rosbuild_add_executable(modify_mono_settings src/modify_mono_settings.cpp )
target_link_libraries(mv_camera_node  mv_camera_driver)

rosbuild_add_executable(stereo_time_reporter src/stereo_time_reporter.cpp)
target_link_libraries(mv_camera_node mv_camera_driver)

rosbuild_add_executable(time_align_gpio_image src/time_align_gpio_image.cpp)
target_link_libraries(mv_camera_node mv_camera_driver)

rosbuild_add_executable(sync_mono_imu src/sync_mono_imu.cpp)
target_link_libraries(mv_camera_node mv_camera_driver)

rosbuild_add_executable(sync_mono_imu_post src/sync_mono_imu_post.cpp)
target_link_libraries(mv_camera_node mv_camera_driver)

rosbuild_add_library(mv_camera_nodelet src/mv_camera_nodelet.cpp)
target_link_libraries(mv_camera_nodelet mv_camera_driver)

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)


